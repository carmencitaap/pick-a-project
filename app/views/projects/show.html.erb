<div class="mb-4">

  <div> Título: <%= @project.title %> </div>
  <div> Descripción: <%= @project.description %> </div>
  <div> Duración: <%= @project.duration %> semanas </div>
  <div> Fecha límite de postulaciones: <%= @project.postulations_due_date %> </div>
  <div> Vacantes: <%= @project.vacancies %> </div>
  <div> Estado: <%= @project.show_state%> </div>

  <%= link_to "Volver", projects_path, class: "bg-slate-100 rounded p-1.5 text-slate-400 mt-2" %>
  
  <%if @project.inscriptions.size != 0 and not current_user.student?%>
  <button onclick="verPostulantes()">Ver postulantes</button>
  <!-- <select id="filterDropdown">
    <option value="all">Mostrar todos</option>
    <% @areas.each do |area| %>
    <option value="<%= area.id %>"><%= area.name %></option>
    <% end %>
  </select> -->

  <div id="inscriptions">
      <!-- <ol id="filteredResults">
        <% @project.inscriptions.each_with_index do |inscription, index| %>
        <li>
          <strong><%= index + 1 %></strong> - <%= inscription.user.name %> <%= inscription.user.last_name %>, Área: 
          <span class="area" data-area-id="<%= inscription.user.area.id %>"><%= inscription.user.area.name %></span>
        </li>
        <% end %>
      </ol> -->
    <!-- </div> -->
  </div>
  <% else %>
    <p>No hay ninguna postulación aún.</p>
  <% end %>
<% if can? :manage,Project%>

<!-- Dropdown para filtrar por área -->



<script>
  // Obtener elementos HTML
  const filterDropdown = document.getElementById('filterDropdown');
  const filteredResults = document.getElementById('filteredResults');
  const project_id = <%=@project.id%>;
  const parent = document.getElementById('inscriptions');

  function verPostulantes(){
    fetch(`/projects/${project_id}/inscriptions/`)
    .then(response=>{
      if (!response.ok){
        throw new Error('Hubo un error')
      }
      return response.json();
    })
    .then(data =>{
    
      var e  = document.createElement("h3")
      var txt = document.createTextNode("Postulantes:")
      e.appendChild(txt)
      parent.innerHTML = e.innerHTML + data.html
      // parent.insertBefore(e,parent)
    })
    .catch(error => {
      console.log(error)
    })
  }

  // Agregar un evento de cambio al dropdown
  filterDropdown.addEventListener('change', () => {
    const selectedAreaId = filterDropdown.value;

    // Filtrar resultados en función del área seleccionada
    const filteredList = Array.from(filteredResults.getElementsByTagName('li'));
    
    if (selectedAreaId === 'all') {
      // Mostrar todos los resultados si se selecciona "Mostrar todos"
      filteredList.forEach(item => (item.style.display = ''));
    } else {
      // Ocultar los resultados cuyas áreas no coinciden con el área seleccionada
      filteredList.forEach(item => {
        const userAreaId = item.querySelector('.area').getAttribute('data-area-id');
        
        if (userAreaId !== selectedAreaId) {
          item.style.display = 'none';
        } else {
          item.style.display = '';
        }
      });
    }
  });
</script>


<% end %>
